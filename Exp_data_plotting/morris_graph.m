%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\minec\Desktop\College\4th_Year\Final Year Project\Program\Data\He\Biagi-8.1\Morris\stats.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/03/20 09:51:22

%% Initialize variables.
filename = 'F:\Program\Data\N2\Morris-20-3-1000\stats.txt';
delimiter = ' ';
startRow = 4;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow-1, 'WhiteSpace', '', 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
stats = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp R;

%% Set up stats

mob = stats(1:7,2:52);
mob_std = stats(10:16,2:52);

diff = stats(20:26,2:52);
diff_std = stats(29:35,2:52);

ion = stats(39:45,2:52);
ion_std = stats(48:54,2:52);

% %% Plot Mobility
% figure;
% for i=1:7
%     for j=1:51
%         scatter(mob(i,j),mob_std(i,j));
%         hold on
%     end
% end
% hold off
% xlabel('\mu')
% ylabel('\sigma')
% title('Mobility')
% 
% figure;
% for i=1:7
%     for j=1:51
%         scatter(diff(i,j),diff_std(i,j));
%         hold on
%     end
% end
% hold off
% xlabel('\mu')
% ylabel('\sigma')
% title('Diffusion Coef.')
% 
% 
% figure;
% for i=1:7
%     for j=1:51
%         scatter(ion(i,j),ion_std(i,j));
%         hold on
%     end
% end
% hold off
% xlabel('\mu')
% ylabel('\sigma')
% title('Ionisation Coef')

%% Individual E/N - Mobility

mkdir('F:\Program\Data\N2\Morris-20-3-1000\mobility');
mkdir('F:\Program\Data\N2\Morris-20-3-1000\diffusion');
mkdir('F:\Program\Data\N2\Morris-20-3-1000\ionisation');

for i=1:7
    h = figure;
    for j=1:51
        scatter(mob(i,j), mob_std(i,j));
        hold on
    end
    hold off
    xlabel('\mu')
    ylabel('\sigma')
    title(['Mobility at E/N = ' num2str(10^(i-4)) 'Td'])
    print(h,['F:\Program\Data\N2\Morris-20-3-1000\mobility\mob_' num2str(i)],'-djpeg','-r1500');
    close all
end

%% Individual E/N - Diff

for i=1:7
    h = figure;
    for j=1:51
        scatter(diff(i,j), diff_std(i,j));
        hold on
    end
    hold off
    xlabel('\mu')
    ylabel('\sigma')
    title(['Diffusion at E/N = ' num2str(10^(i-4)) 'Td'])
    print(h,['F:\Program\Data\N2\Morris-20-3-1000\diffusion\diff_' num2str(i)],'-djpeg','-r1500');
    close all
end

%% Individual E/N - Ion

for i=1:7
    h = figure;
    for j=1:51
        scatter(ion(i,j), ion_std(i,j));
        hold on
    end
    hold off
    xlabel('\mu')
    ylabel('\sigma')
    title(['Ionisation at E/N = ' num2str(10^(i-4)) 'Td'])
    print(h,['F:\Program\Data\N2\Morris-20-3-1000\ionisation\ion_' num2str(i)],'-djpeg','-r1500');
    close all
end
